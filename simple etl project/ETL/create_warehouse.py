import psycopg2 as pg
from psycopg2 import sql
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


# connect to warehouse database and create database
# conn --> connection
# cur  --> cursor
try:
    conn = pg.connect("host=127.0.0.1 dbname=warehouse user=postgres password=postgres")
    cur = conn.cursor()
except:
	conn = pg.connect("host=127.0.0.1 user=postgres password=postgres")
	conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
	cur = conn.cursor()
	cur.execute(sql.SQL("CREATE DATABASE WAREHOUSE"))
	conn.commit()
	conn.close()
	conn = pg.connect("host=127.0.0.1 dbname=warehouse user=postgres password=postgres")
	cur = conn.cursor()

# create table sql code
# you can see this code in schema.sql
cur.execute("""
CREATE TABLE IF NOT EXISTS BOOK (
	ISBN INT NOT NULL,
	NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE DATE NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS WRITER (
	WRITER_ID SERIAL,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_WRITER (
	BW_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_GENRE (
	BG_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BG_ID)
);

CREATE TABLE IF NOT EXISTS TRANSLATOR (
	TRANSLATOR_ID SERIAL,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_TRANSLATOR (
	BT_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BT_ID)
);

CREATE TABLE IF NOT EXISTS MEMBERS (
    MEMBER_ID SERIAL,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE IF NOT EXISTS ADDRESS (
	ZIP_CODE INT NOT NULL,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE)
);

CREATE TABLE IF NOT EXISTS MEMBERS_ADDRESS (
	MA_ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MA_ID)
);

CREATE TABLE IF NOT EXISTS PHONE (
	PHONE_ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID)
);

CREATE TABLE IF NOT EXISTS GET_BOOK (
	ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	EXPIRATION date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ID)
);

-- DELETE TABLES
CREATE TABLE IF NOT EXISTS DELETED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE DATE NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS DELETED_WRITER (
	WRITER_ID INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_WRITER (
	BW_ID INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE NO ACTION,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_GENRE (
	BG_ID INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BG_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_TRANSLATOR (
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_TRANSLATOR (
	BT_ID INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BT_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS (
    MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_ADDRESS (
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS_ADDRESS (
	MA_ID INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MA_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_PHONE (
	PHONE_ID INT REFERENCES PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE NO ACTION,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_GET_BOOK (
	ID INT REFERENCES GET_BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	EXPIRATION NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ID)
);

-- UPDATE TABLES
CREATE TABLE IF NOT EXISTS UPDATED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE date NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS UPDATED_WRITER (
	WRITER_ID INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS  UPDATED_BOOK_WRITER(
	BW_ID INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE NO ACTION,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_GENRE (
	BG_ID INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BG_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_TRANSLATOR (
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_TRANSLATOR (
	BT_ID INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (BT_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS (
    MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(), 
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MEMBER_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_ADDRESS (
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS_ADDRESS (
	MA_ID INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (MA_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_PHONE (
	PHONE_ID INT REFERENCES PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE NO ACTION,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID, UPDATE)

CREATE TABLE IF NOT EXISTS UPDATED_GET_BOOK (
	ID INT REFERENCES GET_BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	EXPIRATION NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	TRANSFER DATE DEFAULT NOW(),
	PRIMARY KEY (ID, UPDATE)
);
""")
conn.commit()
conn.close()
