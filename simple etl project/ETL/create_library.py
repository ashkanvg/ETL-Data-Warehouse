import psycopg2 as pg
from psycopg2 import sql
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# connect to main database(library) and create database
# conn --> connection
# cur  --> cursor
try:
    conn = pg.connect("host=127.0.0.1 dbname=library user=postgres password=postgres")
    cur = conn.cursor()
except:
	conn = pg.connect("host=127.0.0.1 user=postgres password=postgres")
	conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
	cur = conn.cursor()
	cur.execute(sql.SQL("CREATE DATABASE LIBRARY"))
	conn.commit()
	conn.close()
	conn = pg.connect("host=127.0.0.1 dbname=library user=postgres password=postgres")
	cur = conn.cursor()

# create table sql code
# you can see this code in schema.sql
cur.execute("""
CREATE TABLE IF NOT EXISTS BOOK (
	ISBN INT NOT NULL,
	NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE DATE NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS WRITER (
	WRITER_ID SERIAL,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_WRITER (
	BW_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_GENRE (
	BG_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (BG_ID)
);

CREATE TABLE IF NOT EXISTS TRANSLATOR (
	TRANSLATOR_ID SERIAL,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_TRANSLATOR (
	BT_ID SERIAL,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (BT_ID)
);

CREATE TABLE IF NOT EXISTS MEMBERS (
    MEMBER_ID SERIAL,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE IF NOT EXISTS ADDRESS (
	ZIP_CODE INT NOT NULL,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE)
);

CREATE TABLE IF NOT EXISTS MEMBERS_ADDRESS (
	MA_ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE CASCADE ON DELETE CASCADE,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (MA_ID)
);

CREATE TABLE IF NOT EXISTS PHONE (
	PHONE_ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID)
);

CREATE TABLE IF NOT EXISTS GET_BOOK (
	ID SERIAL,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE CASCADE,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE CASCADE,
	EXPIRATION date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	PRIMARY KEY (ID)
);

-- DELETE TABLES
CREATE TABLE IF NOT EXISTS DELETED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE DATE NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS DELETED_WRITER (
	WRITER_ID INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_WRITER (
	BW_ID INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE NO ACTION,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_GENRE (
	BG_ID INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (BG_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_TRANSLATOR (
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_TRANSLATOR (
	BT_ID INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (BT_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS (
    MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_ADDRESS (
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS_ADDRESS (
	MA_ID INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (MA_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_PHONE (
	PHONE_ID INT REFERENCES PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE NO ACTION,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID)
);

CREATE TABLE IF NOT EXISTS DELETED_GET_BOOK (
	ID INT REFERENCES GET_BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	EXPIRATION NOT NULL,
	CREATE DATE DEFAULT NOW(),
	DELETE DATE DEFAULT NOW(),
	PRIMARY KEY (ID)
);

-- UPDATE TABLES
CREATE TABLE IF NOT EXISTS UPDATED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    NAME VARCHAR(25) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	LANGUAGE VARCHAR(25) NOT NULL,
	VERSION INT NOT NULL,
	RELEASE date NOT NULL,
	PUBLISHER VARCHAR(25) NOT NULL,
	AMOUNT INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS UPDATED_WRITER (
	WRITER_ID INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (WRITER_ID)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_WRITER (
	BW_ID INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE CASCADE ON DELETE NO ACTION,
	WRITER_ID INT REFERENCES WRITER ON UPDATE CASCADE ON DELETE NO ACTION,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (BW_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_GENRE (
	BG_ID INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	GENRE VARCHAR(25) NOT NULL,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	PRIMARY KEY (BG_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_TRANSLATOR (
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (TRANSLATOR_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_TRANSLATOR (
	BT_ID INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	TRANSLATOR_ID INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	PRIMARY KEY (BT_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS (
    MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	BIRTHDAY date NOT NULL,
	MEMBERSHIP date NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(), 
	PRIMARY KEY (MEMBER_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_ADDRESS (
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	COUNTRY VARCHAR(25) NOT NULL,
	CITY VARCHAR(25) NOT NULL,
	HOUSE_CODE INT NOT NULL,
	APARTMENT_CODE INT NOT NULL,
	PHONE INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (ZIP_CODE, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS_ADDRESS (
	MA_ID INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ZIP_CODE INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	CREATE DATE NOT NULL,
	UPDATE DATE DEFAULT NOW(), 
	PRIMARY KEY (MA_ID, UPDATE)
);

CREATE TABLE IF NOT EXISTS UPDATED_PHONE (
	PHONE_ID INT REFERENCES PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE CASCADE ON DELETE NO ACTION,
	MOBILE_CODE INT NOT NULL,
	MOBILE_NUMBER INT NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (PHONE_ID, UPDATE)

CREATE TABLE IF NOT EXISTS UPDATED_GET_BOOK (
	ID INT REFERENCES GET_BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	MEMBER_ID INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	EXPIRATION NOT NULL,
	CREATE DATE DEFAULT NOW(),
	UPDATE DATE DEFAULT NOW(),
	PRIMARY KEY (ID, UPDATE)
);

-- UPDATE TRIGGERS
CREATE OR REPLACE FUNCTION BOOK_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_BOOK(ISBN, NAME, DESCRIPTION, LANGUAGE,
            VERSION, RELEASE, PUBLISHER, AMOUNT, CREATE) 
		VALUES(old.ISBN, old.NAME, old.DESCRIPTION, old.LANGUAGE,
            old.VERSION, old.RELEASE, old.PUBLISHER, old.AMOUNT, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_UPDATE_TIME
	BEFORE update 
	ON BOOK
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_UPDATE_TIME();

CREATE OR REPLACE FUNCTION WRITER_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_WRITER(WRITER_ID, FIRST_NAME, LAST_NAME, CREATE) 
		VALUES(old.WRITER_ID, old.FIRST_NAME, old.LAST_NAME, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER WRITER_UPDATE_TIME
	BEFORE update 
	ON WRITER
	FOR EACH ROW
	EXECUTE PROCEDURE WRITER_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_WRITER_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_BOOK_WRITER(BW_ID, WRITER_ID, ISBN, CREATE) 
		VALUES(old.BW_ID, old.WRITER_ID, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_WRITER_UPDATE_TIME
	BEFORE update 
	ON BOOK_WRITER
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_WRITER_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_GENRE_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_BOOK_GENRE(BG_ID, GENRE, ISBN, CREATE) 
		VALUES(old.BG_ID, old.GENRE, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_GENRE_UPDATE_TIME
	BEFORE update 
	ON BOOK_GENRE
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_GENRE_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION TRANSLATOR_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_TRANSLATOR(TRANSLATOR_ID, FIRST_NAME, LAST_NAME, CREATE) 
		VALUES(old.TRANSLATOR_ID, old.FIRST_NAME, old.LAST_NAME, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER TRANSLATOR_UPDATE_TIME
	BEFORE update 
	ON TRANSLATOR
	FOR EACH ROW
	EXECUTE PROCEDURE TRANSLATOR_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_TRANSLATOR_UPDATE_TIMEe()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_BOOK_TRANSLATOR(BT_ID, TRANSLATOR_ID, ISBN, CREATE) 
		VALUES(old.BT_ID, old.TRANSLATOR_ID, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_TRANSLATOR_UPDATE_TIME
	BEFORE update 
	ON BOOK_TRANSLATOR
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_TRANSLATOR_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION MEMBERS_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_MEMBERS(MEMBER_ID, FIRST_NAME, LAST_NAME,
            BIRTHDAY, MEMBERSHIP, CREATE) 
		VALUES(old.MEMBER_ID, old.FIRST_NAME, old.LAST_NAME,
            old.BIRTHDAY, old.MEMBERSHIP, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER MEMBERS_UPDATE_TIME
	BEFORE update 
	ON MEMBERS
	FOR EACH ROW
	EXECUTE PROCEDURE MEMBERS_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION ADDRESS_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_ADDRESS(ZIP_CODE, COUNTRY, CITY HOUSE_CODE,
			APARTMENT_CODE, PHONE, CREATE) 
		VALUES(old.ZIP_CODE, old.COUNTRY, old.CITY, old.HOUSE_CODE,
			old.APARTMENT_CODE, old.PHONE, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER ADDRESS_UPDATE_TIME
	BEFORE update 
	ON ADDRESS
	FOR EACH ROW
	EXECUTE PROCEDURE ADDRESS_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION MEMBERS_ADDRESS_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_MEMBERS_ADDRESS(MA_ID, MEMBER_ID, ZIP_CODE, CREATE) 
		VALUES(old.MA_ID, old.MEMBER_ID, old.ZIP_CODE, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER MEMBERS_ADDRESS_UPDATE_TIME
	BEFORE update 
	ON MEMBERS_ADDRESS
	FOR EACH ROW
	EXECUTE PROCEDURE MEMBERS_ADDRESS_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION PHONE_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_PHONE(PHONE_ID, MEMBER_ID, MOBILE_CODE, MOBILE_NUMBER, CREATE) 
		VALUES(old.PHONE_ID, old.MEMBER_ID, old.MOBILE_CODE, old.MOBILE_NUMBER, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER PHONE_UPDATE_TIME
	BEFORE update 
	ON PHONE
	FOR EACH ROW
	EXECUTE PROCEDURE PHONE_UPDATE_TIME();
	
CREATE OR REPLACE FUNCTION GET_BOOK_UPDATE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO updateD_GET_BOOK(ID, MEMBER_ID, ISBN, EXPIRATION, CREATE) 
		VALUES(old.ID, old.MEMBER_ID, old.ISBN, old.EXPIRATION, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER GET_BOOK_UPDATE_TIME
	BEFORE update 
	ON GET_BOOK
	FOR EACH ROW
	EXECUTE PROCEDURE GET_BOOK_UPDATE_TIME();

-- DELETE TRIGGERS
CREATE OR REPLACE FUNCTION BOOK_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_BOOK(ISBN, NAME, DESCRIPTION, LANGUAGE,
            VERSION, RELEASE, PUBLISHER, AMOUNT, CREATE) 
		VALUES(old.ISBN, old.NAME, old.DESCRIPTION, old.LANGUAGE,
            old.VERSION, old.RELEASE, old.PUBLISHER, old.AMOUNT, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_DELETE_TIME
	BEFORE DELETE 
	ON BOOK
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_DELETE_TIME();

CREATE OR REPLACE FUNCTION WRITER_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_WRITER( WRITER_ID, FIRST_NAME, LAST_NAME, CREATE) 
		VALUES(old. WRITER_ID, old.FIRST_NAME, old.LAST_NAME, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER WRITER_DELETE_TIME
	BEFORE DELETE 
	ON WRITER
	FOR EACH ROW
	EXECUTE PROCEDURE WRITER_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_WRITER_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_BOOK_WRITER(BW_ID, WRITER_ID, ISBN, CREATE) 
		VALUES(old.BW_ID, old.WRITER_ID, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_WRITER_DELETE_TIME
	BEFORE DELETE 
	ON BOOK_WRITER
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_WRITER_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_GENRE_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_BOOK_GENRE(BG_ID, GENRE, ISBN, CREATEt) 
		VALUES(old.BG_ID, old.GENRE, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_GENRE_DELETE_TIME
	BEFORE DELETE 
	ON BOOK_GENRE
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_GENRE_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION TRANSLATOR_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_TRANSLATOR(TRANSLATOR_ID, FIRST_NAME, LAST_NAME, CREATE) 
		VALUES(old.TRANSLATOR_ID, old.FIRST_NAME, old.LAST_NAME, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER TRANSLATOR_DELETE_TIME
	BEFORE DELETE 
	ON TRANSLATOR
	FOR EACH ROW
	EXECUTE PROCEDURE TRANSLATOR_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION BOOK_TRANSLATOR_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_BOOK_TRANSLATOR(BT_ID, TRANSLATOR_ID, ISBN, CREATE) 
		VALUES(old.BT_ID, old.TRANSLATOR_ID, old.ISBN, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER BOOK_TRANSLATOR_DELETE_TIME
	BEFORE DELETE 
	ON BOOK_TRANSLATOR
	FOR EACH ROW
	EXECUTE PROCEDURE BOOK_TRANSLATOR_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION MEMBERS_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_MEMBERS(MEMBER_ID, FIRST_NAME, LAST_NAME 
            BIRTHDAY, MEMBERSHIP, CREATE) 
		VALUES(old.MEMBER_ID, old.FIRST_NAME, old.LAST_NAME ,
            old.BIRTHDAY, old.MEMBERSHIP, old.CREATE);
		RETURN NULL;
	END	
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER MEMBERS_DELETE_TIME
	BEFORE DELETE 
	ON MEMBERS
	FOR EACH ROW
	EXECUTE PROCEDURE MEMBERS_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION ADDRESS_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_ADDRESS(ZIP_CODE, COUNTRY, CITY, HOUSE_CODE,
			APARTMENT_CODE, PHONE, CREATE) 
		VALUES(old.ZIP_CODE, old.COUNTRY, old.CITY, HOUSE_CODE,
			old.APARTMENT_CODE, old.PHONE, old.CREATE);
		RETURN NULL;
	END	
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER ADDRESS_DELETE_TIME
	BEFORE DELETE 
	ON ADDRESS
	FOR EACH ROW
	EXECUTE PROCEDURE ADDRESS_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION MEMBERS_ADDRESS_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_MEMBERS_ADDRESS(MA_ID, MEMBER_ID, ZIP_CODE, CREATE) 
		VALUES(old.MA_ID, old.MEMBER_ID, old.ZIP_CODE, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER MEMBERS_ADDRESS_DELETE_TIME
	BEFORE DELETE 
	ON MEMBERS_ADDRESS
	FOR EACH ROW
	EXECUTE PROCEDURE MEMBERS_ADDRESS_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION PHONE_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_PHONE(PHONE_ID, MEMBER_ID, MOBILE_CODE, MOBILE_NUMBER, CREATE) 
		VALUES(old.PHONE_ID, old.MEMBER_ID, old.MOBILE_CODE, old.MOBILE_NUMBER, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER PHONE_DELETE_TIME
	BEFORE DELETE 
	ON PHONE
	FOR EACH ROW
	EXECUTE PROCEDURE PHONE_DELETE_TIME();
	
CREATE OR REPLACE FUNCTION GET_BOOK_DELETE_TIME()
	RETURNS TRIGGER AS
 $$
	BEGIN
		INSERT INTO DELETED_GET_BOOK(ID, MEMBER_ID, ISBN, EXPIRATION, CREATE) 
		VALUES(old.ID, old.MEMBER_ID, old.ISBN, old.EXPIRATION, old.CREATE);
		RETURN NULL;
	END
 $$
 LANGUAGE 'plpgsql';

CREATE TRIGGER GET_BOOK_DELETE_TIME
	BEFORE DELETE 
	ON GET_BOOK
	FOR EACH ROW
	EXECUTE PROCEDURE GET_BOOK_DELETE_TIME();
""")

conn.commit()
conn.close()
